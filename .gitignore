import java.util.ArrayList;


public class Student {

	private String name;
	private double gpa;
	private double creditsAttempted;
	private ArrayList<Course> courses = new ArrayList<>();

	public Student(String aName) {
		name = aName;
		creditsAttempted = 0.0;
		this.gpa = 0.0;
	}
	
	public Student(String aName, double gpa){
		if(aName.length() > 0){
		name = aName;
		} else {
			throw new IllegalArgumentException();
		}
		if(Math.abs(gpa - 2) <= 2){
		this.gpa = gpa;
		} else {
			throw new IllegalArgumentException();
		}
		creditsAttempted = 0.0;
	}

	public String getName() {
		return name;
	}

	public double getGpa() {
		return gpa;
	}

	public void setGpa(double gpa) {
		this.gpa = gpa;
	}

	public static void main(String[] args) {
		Student s1 = new Student("bob");
		s1.addCourseCredit(6.0, 4.0);
		Course c1 = new Course("math", "");
		Course c2 = new Course("math2", "");
		s1.add(c1);
		s1.add(c2);
		System.out.println(s1 + " " + s1.getGpa());	
		Student s1Twin = new Student("bob");
		s1Twin.addCourseCredit(6.0, 4.0);
		Student notS1 = new Student("joe");
		
		System.out.println(s1.equals(s1Twin));
		System.out.println(s1.equals(notS1));
		System.out.println(s1.equals(s1));
		System.out.println(s1.equals("hello"));
		
		System.out.println("\n" + s1.gpa);
		s1.addCourseCredit(0.0, 4.0);
		System.out.println(s1.gpa);
		
		System.out.println(s1);
		System.out.println(s1.courses.size());
		s1.dropAll();
		System.out.println(s1.courses.size());
		
	}
	
	// Without this method written correctly, Course.inClass() won't work!
	// Pages 153-154 in the MSD book says a bit about writing equals().
	public boolean equals(Object obj) {
		if ( obj instanceof Student ) {
			Student s = (Student) obj;
			if(s.getName().equals( this.name )) {
				System.out.println(this.getName() + " is equal to " + s.getName());
				return true;
			} else {
				System.out.println(this.getName() + " is not equal to " + s.getName());
				return false;
			}
		} else {
			System.out.println(obj.toString() + " is not a student");
			return false;
		}
	}

	// The following is a version of equals() that works
	//   sometimes but not always. It's NOT the correct way
	//   to do it!
//	public boolean equals(Object o) {
//		if(o instanceof Student){
//			return ((Student)(o)).getName().equals(this.name);
//		} else {
//			return false;
//		}
//	}
	

	private void addCourseCredit(double gradePoints, double credits) {
		if(gradePoints < 0 || credits < 0){
			throw new IllegalArgumentException();
		}
		double totalGradePoints = gpa*creditsAttempted;
		totalGradePoints += gradePoints;
		this.creditsAttempted += credits;
		this.gpa = totalGradePoints/creditsAttempted;
}
	
	public boolean add(Course course){
		if(!this.courses.contains(course)){
			this.courses.add(course);
			return true;
		} else {
			System.out.println("Already enrolled in that course");
			return false;
		}
	}
	
	public boolean drop(Course aCourse){
		if(!this.courses.contains(aCourse)){
			this.courses.remove(aCourse);
			return true;
		} else {
			return false;
		}
	}
	
	public void dropAll(){
		this.courses.removeAll(courses);
	}

	@Override
	public String toString() {
		String str = "name: " + this.name + "\ngpa: " + this.gpa + "\nclasses: ";
		for(Course course : courses) str+=course.getID() + ", ";
		return str.substring(0,str.length()-2);
	}
	


}
